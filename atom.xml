<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Richard&#39;s bloge</title>
  
  <subtitle>my output</subtitle>
  <link href="/Black-House.github.io/atom.xml" rel="self"/>
  
  <link href="https://black-house.github.io/"/>
  <updated>2018-12-03T11:49:43.552Z</updated>
  <id>https://black-house.github.io/</id>
  
  <author>
    <name>Richard</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://black-house.github.io/2018/11/27/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%AF%AD%E6%B3%95/"/>
    <id>https://black-house.github.io/2018/11/27/python数据分析语法/</id>
    <published>2018-11-27T14:04:39.907Z</published>
    <updated>2018-12-03T11:49:43.552Z</updated>
    
    <content type="html"><![CDATA[<p>#python应用篇</p><p>现在公众号的案列分析主要步棸</p><ol><li>数据爬取</li><li>数据清洗</li><li>数据探索</li><li>数据可视化 (pyecharts)柱状图、直方图、饼图、线状图、热力图、地理图</li><li>评论的文本分析    绘制词云图</li></ol><h2 id="一、python数据分析语法总结–来自微信公众号文章"><a href="#一、python数据分析语法总结–来自微信公众号文章" class="headerlink" title="一、python数据分析语法总结–来自微信公众号文章"></a>一、python数据分析语法总结–来自微信公众号文章</h2><p>import pymysql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;774110919&apos;, port=3306, db=&apos;maoyan&apos;)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = &apos;CREATE TABLE IF NOT EXISTS films (name VARCHAR(255) NOT NULL, type VARCHAR(255) NOT NULL, country VARCHAR(255) NOT NULL, length VARCHAR(255) NOT NULL, released VARCHAR(255) NOT NULL, score VARCHAR(255) NOT NULL, people INT NOT NULL, box_office BIGINT NOT NULL, PRIMARY KEY (name))&apos;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></p><p>创建sql表</p><p>conn = pymysql.connect(host=’localhost’, user=’root’, password=’774110919’, port=3306, db=’maoyan’, charset=’utf8mb4’)<br>cursor = conn.cursor()<br>sql = “select * from films”<br>db = pd.read_sql(sql, conn)<br>从数据库选出数据表</p><p>df=db.sort_values(by=”score”,ascending=False)<br>根据score标签来递减排序</p><p>attr = np.array(dom[‘name’][0:10])<br>attr = [“{}”.format(i.replace(‘：致命守护者’, ‘’)) for i in attr]<br>replace(old,new,max): 使用new字符串替换old字符串，max是替换的次数</p><p>month_message=groupby([‘month’]) 根据month标签来分组<br>month_com=month_message[‘month’].agg([‘count’])统计分组中同类项的数量并生成一个标签列<br>month_com.reset_index(inplace=True)通过前面的筛选之后行列序号不会再按照序号排列下来需要使用reser_index函数重新列出序号</p><p>month_com_last = month_com.sort_index()<br>按照序号从小到大排列下来</p><p>v1 = np.array(month_com_last[‘count’])<br>v1 = [“{}”.format(i) for i in v1]<br>先将series变成数组，然后变成列表</p><p>db = pd.read_sql(sql, conn)<br>df = db.sort_values(by=”released”, ascending=False)<br>dom = df[[‘name’, ‘released’]]<br>选取DataFrame中的标签为name和released的两列</p><p>db[‘sort_num_money’] = db[‘box_office’].rank(ascending=0, method=’dense’)<br>rank来进行排序</p><p>apply函数<br>主要是将一个函数应用的一个DataFrame的数据中,当然这里还要注意行和列的区别<br>需要指定(axis=0每行作为数据内容项)可以省略，(axis=1,每列作为数据数据内容项)<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f=lambda x: x.max()- x.min()</span><br><span class="line">frame.apply(f)</span><br><span class="line"></span><br><span class="line">b    0.505220</span><br><span class="line">d    1.284980</span><br><span class="line">e    1.880011</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>df=pd.read_csv(‘air_tianjin_2017.csv’,header=None,name=[‘Date’,’m’,’b’,’a’])<br>dom=df[[‘b’,’a’]]</p><p>将series转变为array再转变为list<br>v1=np.array(month_com_list[‘mean’])<br>v1=[“{}”.format(int(i)) for i in v1]</p><p>##python的实际案例分析<br>python数据分析主要应用领域</p><ol><li>信贷风控</li><li>营销分析</li><li>金融量化<h3 id="大数据风险控制"><a href="#大数据风险控制" class="headerlink" title="大数据风险控制"></a>大数据风险控制</h3>从信贷风控的角度研究数据分析如何帮助公司创收？<br>信贷风控主要分为贷前、贷中、贷后三部分</li></ol><p><strong>1.贷前风险识别，贷中的风险监控与预警</strong><br><img src="http://phi87jf30.bkt.clouddn.com/%E7%8E%89%E8%A1%A1%E9%A3%8E%E6%8E%A7%E6%9C%8D%E5%8A%A1.jpg" alt=""></p><h1 id="python-数据结构的用法"><a href="#python-数据结构的用法" class="headerlink" title="python 数据结构的用法"></a>python 数据结构的用法</h1><p>##python字符串的用法</p><p>###一、字符串的拼接</p><ol><li>字符串的格式化(%d, %f)<br>print(‘%s %s’ % (‘hello’,’world’))<br>hello world</li><li>format()拼接方式<br>简洁版<br>s1=’hello {}! my name is {}.’.format(‘world’,’python猫’)<br>print(s1)<br>hello world! my name is python猫.<br>对号入座<br>s2=’hello {0}! my name is {1}.’.format(‘world’,’python猫’)<br>print(s2)<br>hello world my name is python猫</li></ol><p>s3=’hello {name1}! my name is {name2}.’.format(name1=’world’,name2=’python猫’)<br>print(s2)<br>hello world! my name is python猫.</p><ol start="3"><li><p>join()拼接方式<br>str_list=[‘hello’,’world’]<br>str_join1=’’.join(str_list)<br>print(str_join1)<br>hello world<br>str_join2=’-‘.join(str_list)<br>print(str_join2)<br>hello-world</p></li><li><p>f-string方式<br>name=’world’<br>myname=’python_cat’<br>words=f’hello {name}. my name is {myname}.’<br>print(words)<br>hello world. my name is python_cat</p></li></ol><h3 id="二、-将字符串拆分"><a href="#二、-将字符串拆分" class="headerlink" title="二、 将字符串拆分"></a>二、 将字符串拆分</h3><ol><li>split(a,b) a为拆分字符串, b为最大不能超过的拆分次数<br>s=’hello world’<br>s.split()  &gt;&gt;&gt; [‘hello’, ‘world’]<br>s.split(‘ ‘) &gt;&gt;&gt;[‘hello’,’world’]<br>s.split(‘  ‘) &gt;&gt;&gt;[‘hello world’]<br>s.split(‘world’)&gt;&gt;&gt;[‘hello’,]</li></ol><h3 id="三、字符串替换方法"><a href="#三、字符串替换方法" class="headerlink" title="三、字符串替换方法"></a>三、字符串替换方法</h3><p><img src="http://phi87jf30.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2%E6%96%B9%E6%B3%95.jpg" alt=""></p><h2 id="python列表的用法"><a href="#python列表的用法" class="headerlink" title="python列表的用法"></a>python列表的用法</h2><ol><li>extend(L)： 将L中所有元素添加到对象列表中</li><li>insert(i,x):在指定位置插入一个元素</li><li>remove(x):删除列表中值为x的第一个元素</li><li>pop():从列表中删除指定位置的元素</li><li>sort():对列表中元素进行排序<br>简单排序  x=[4,6,2,1,7,9]<pre><code>x.sort()y=sorted(x)</code></pre></li></ol><ol start="6"><li>reverse():逆向排序列表</li><li>count(x):返回x在列表中出现的次数</li><li>a=[1,2,3,4,5]<br>del a[2]</li><li>tuple([1,2,3])  –(1,2,3) 将列表转为元组</li><li>enumrate()函数:使用enumrate函数可以得到值与对应的索引位置<br>for i，v in enumrate([‘tic’,’tac’,’toe’])<br>   print i,v</li></ol><p>###嵌套的列表推导式<br>-mat=[<br>[1,2,3],<br>[4,5,6],<br>[7,8,9],<br>]<br>-print [[row[i] for row in mat] for i in [0,1,2]]<br>-zip(*mat)<br>-[(1,4,7),(2,5,8),(3,6,9)]</p><p>##python的字典方法</p><ol><li>clear()<br>清除字典中的所有的项<br>x.clear()</li><li>copy()方法<br>获得的是浅复制的副本，如果副本替换值的时候原始字典不会改变，如果副本不是替换而是修改的时候，原始字典也会改变。</li><li>deepcopy()方法   from copy import deepcopy<br>使用deepcopy的方法就不用担心副本改变造成原始字典发生改变的情况了。</li><li>fromkeys()方法   使用给定的键建立新的字典<br>{}.fromkeys([‘name’,’age’])<br>{‘name’:None,’age’:None}<br>dict.fromkeys([‘name’,’age’],’unknown’)<br>{‘name’:’unknown’,’age’:’unknown’} </li><li>keys和iterkeys<br>keys方法将字典中的键以列表的形式返回    iterkeys返回针对键的迭代器</li><li>values和itervalues     《《《  》》》 dict<br>values方法以列表的形式返回字典中的值   itervalues返回的是迭代器<br>使用dict就可以将键-值对的字典形式还原成字典  </li><li>items和iteritems方法<br>items将字典中的键值对以列表的形式返回   iteritems 返回键值对对应的迭代器</li><li>pop方法<br>用来获得对应于给定键的值，然后将这个键-值对从字典中移除<br>d={‘title’: ‘python’,’url’:’http’,’spam’:0}<br>d.pop(‘spam’)<br>d   {‘title’:’python’,’url’:’http’}</li><li>update方法<br>利用字典项更新另外一个字典：提供的字典中的项会被添加到旧的字典中，若有相同的键会进行覆盖<br>d={‘a’:1,’b’:2,’c’:3}<br>x={‘d’:4}<br>d.update(x)<br>d   {‘a’:1,’b’:2,’c’:3,’d’:4}</li><li>序列解包<br>这里序列解包或者可迭代解包：将多个值得序列解开，然后放到变量的序列中<br>values=1,2,3<br>x,y,z=values<br>x   1   y 2  z 3</li><li>popitem方法   通过popitem方法可以获取到字典的键-值对，同时也删除了字典的键-值对。<br>d={‘name’:’Robin’,’girlfriend’:’Mraion’}<br>key,value=d.popitem()</li><li>while 循环<br>用来在任何条件为真的情况下重复执行一个代码块<br>name=’’<br>while not name:<br> name=raw_input(‘please enter yourname:’)<br>print ‘hello. %s!’ % name</li><li>break (跳出循环)<br>break语句用来终止循环语句，哪怕循环条件没有成为False也将停止循环语句  </li><li>continue语句<br>continue语句是跳出当前的循环块中的剩余语句，然后继续下一个循环。</li><li>pass语句<br>pass语句其实什么也不做但是在语法上必须要站位的时候使用<br>16.列表推导式—轻量级循环<br>[x*x for x in range(10) if x%3==0]<br>[(x,y) for x in range(3) for y in range(3)]</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#python应用篇&lt;/p&gt;
&lt;p&gt;现在公众号的案列分析主要步棸&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据爬取&lt;/li&gt;
&lt;li&gt;数据清洗&lt;/li&gt;
&lt;li&gt;数据探索&lt;/li&gt;
&lt;li&gt;数据可视化 (pyecharts)柱状图、直方图、饼图、线状图、热力图、地理图&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://black-house.github.io/2018/11/19/linux%E5%91%BD%E4%BB%A4/"/>
    <id>https://black-house.github.io/2018/11/19/linux命令/</id>
    <published>2018-11-19T02:56:28.728Z</published>
    <updated>2018-11-21T07:27:39.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux简介以及常用命令"><a href="#linux简介以及常用命令" class="headerlink" title="linux简介以及常用命令"></a>linux简介以及常用命令</h1><h2 id="linux的常用命令"><a href="#linux的常用命令" class="headerlink" title="linux的常用命令"></a>linux的常用命令</h2><ul><li>文件目录操作命令</li><li>压缩/解压缩命令</li><li>常用系统命令</li><li>文件打包命令</li><li>搜索命令</li><li>关机命令</li></ul><h3 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h3><p>ls:显示文件和目录列表<br>cd: 切换目录<br>pwd: 显示当前工作目录<br>mkdir: 创建工作目录<br>touch: 生成新的空文件或者更改现有文件的时间<br>cp: 复制文件或者目录<br>mv: 移动文件或者目录、文件或者目录改名<br>rm: 删除文件或者目录</p><p>cat和tac:滚动显示文本文件内容</p><ul><li>cat: 用于从文件头到文件尾显示</li><li>tac: 用于从文件尾到文件头显示</li></ul><p>more和less: 分屏显示文本文件内容</p><ul><li>more :只能从文件头到文件尾显示</li><li>less: 可以使用PgUp和PgDn双向显示</li></ul><p>head和tail:默认显示10行内容</p><ul><li>head: 显示文本文件的前部的若干行</li><li>tail: 显示文本文件的后部若干行</li></ul><p>grep: 用来从一个文件中找出匹配指定关键字的那一行，并送到标准输出。结合管道，我们通常用它来过滤搜索结果。 </p><h3 id="压缩、解压缩命令"><a href="#压缩、解压缩命令" class="headerlink" title="压缩、解压缩命令"></a>压缩、解压缩命令</h3><p>gzip和gunzip: 压缩和解压缩文件或目录</p><ul><li>gzip: 压缩文件</li><li>gunzip: 解压缩文件<br>zip和unzip:压缩和解压缩文件或目录</li><li>zip: 压缩文件</li><li>unzip: 解压缩文件</li></ul><p>bzip2和bunzip2: 压缩和解压缩文件或目录</p><ul><li>bzip2: 压缩文件</li><li>bunzip2: 解压缩文件</li></ul><p>文件打包命令<br>tar: 打包和解压</p><ul><li>用于磁带机备份，也可以备份在一个硬盘文件上</li><li>主要参数:<br> -c: 将文件备份过来<br> -v: 将过程输出<br> -x: 从一个文件中解出备份</li><li>范例<ul><li>打包：tar -cvf myfile.tar somedirname</li><li>解包 ：tar -xvf myfile.tar</li></ul></li></ul><p>文件搜索命令<br>which: 显示一个可执行文件的完整路径—which ls<br>where is :搜索一个可执行工具及其相关配置、帮助<br>locate: 显示所有文件名以及其所在路径包含关键字段的文件与目录用法<br>find: 从指定路径下递归向下搜索文件</p><p>linux的用户和用户组操作</p><p>crontab<br> 每周三的时间点</p><p>crontab -e -u root<br><em>/3 </em> <em> </em> <em> free -m &gt;&gt; /tmp/mem.log </em>/3 <em> </em> <em> </em> date &gt;&gt; /tmp/mem.log</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux简介以及常用命令&quot;&gt;&lt;a href=&quot;#linux简介以及常用命令&quot; class=&quot;headerlink&quot; title=&quot;linux简介以及常用命令&quot;&gt;&lt;/a&gt;linux简介以及常用命令&lt;/h1&gt;&lt;h2 id=&quot;linux的常用命令&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python数据的可视化</title>
    <link href="https://black-house.github.io/2018/11/08/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://black-house.github.io/2018/11/08/数据的可视化/</id>
    <published>2018-11-08T06:12:07.000Z</published>
    <updated>2018-12-26T07:48:12.365Z</updated>
    
    <content type="html"><![CDATA[<ul><li>可视化图表介绍：<a href="https://mp.weixin.qq.com/s/v11B87yTnNA8U9GYr5iRXA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/v11B87yTnNA8U9GYr5iRXA</a></li></ul><blockquote><p>没有任何的办法，只有一点点的写下去，虽然心很累，虽然不知道前面的什么，但是多记录一点总会是自己的财富，坚持吧！</p></blockquote><p><img src="http://phi87jf30.bkt.clouddn.com/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.jpg" alt=""></p><a id="more"></a><p>向客户展示数据产品，经常用到的直接有效的统计工具就是可视化图，在python中数据可视化的库有挺多的，这里推荐几个比较常用的：</p><ol><li>Matplotlib</li><li>Plotly</li><li>Seaborn</li><li>Ggplot</li><li>Bokeh</li><li>Pyechart</li><li>Pygal<br>这里我主要推荐两个，分别是 bokeh、pyecharts。</li></ol><h1 id="pyecharts"><a href="#pyecharts" class="headerlink" title="pyecharts"></a>pyecharts</h1><p><em>来源<a href="http://pyecharts.org/#/zh-cn/charts_base?id=heatmap%ef%bc%88%e7%83%ad%e5%8a%9b%e5%9b%be%ef%bc%89" target="_blank" rel="noopener">http://pyecharts.org/#/zh-cn/charts_base?id=heatmap%ef%bc%88%e7%83%ad%e5%8a%9b%e5%9b%be%ef%bc%89</a></em></p><p>pyecharts是一个用于生成Echarts图表的类库</p><p>echarts是百度开源的一个数据可视化JS库，主要用于数据的可视化。pyecharts是一个用于生成Echarts图表的类库。实际上就是Echarts与python的对接。使用pyecharts可以生成独立的网页，也可以在flask,Django中集成使用。</p><p>pyecharts中基本的图表有多种类，这里重点介绍常用的图表：</p><ul><li>Bar(柱状图/条形图)</li><li>Bar3D(3D柱状图)</li><li>Boxplot(箱型图)</li><li>Geo(地理坐标系)</li><li>Graph(关系图)</li><li>HeatMap(热力图)</li><li>Kline/Candlestick(K线图)</li><li>Pie(饼图)</li><li>Radar(雷达图)</li><li>Scatter(散点图)</li><li>wordCloud(词云图)</li></ul><h2 id="Bar-柱状图-条形图"><a href="#Bar-柱状图-条形图" class="headerlink" title="Bar(柱状图/条形图)"></a>Bar(柱状图/条形图)</h2><p><strong>柱状图</strong><br>Bar.add()</p><blockquote><p>add(name, x_axis, y_axis, is_stack=False, bar_category_gap=’20%’)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from pyecharts import Bar</span><br><span class="line">attr=[&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;]</span><br><span class="line">v1=[5,20,36,10,75,90]</span><br><span class="line">v2=[10,25,8,60,20,80]</span><br><span class="line">bar=Bar(&quot;柱状图示例&quot;)</span><br><span class="line">bar.add(&quot;商家A&quot;, attr, v1, is_stack=True)</span><br><span class="line">bar.add(&quot;商家B&quot;, attr, v2, is_stack=True)</span><br><span class="line">bar.render()</span><br></pre></td></tr></table></figure><p><img src="http://phi87jf30.bkt.clouddn.com/%E6%9F%B1%E7%8A%B6%E5%9B%BE.gif" alt=""></p><p><strong>使用标记点和标记线</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pyecharts import Bar</span><br><span class="line"> </span><br><span class="line">bar=Bar(&quot;标记点和标记线示例&quot;)</span><br><span class="line">bar.add(&quot;商家A&quot;, attr, v1, mark_point=[&quot;average&quot;])</span><br><span class="line">bar.add(&quot;商家B&quot;, attr, v2, mark_line=[&quot;min&quot;,&quot;max&quot;])</span><br><span class="line">bar.render()</span><br></pre></td></tr></table></figure><p><img src="http://phi87jf30.bkt.clouddn.com/%E6%9F%B1%E7%8A%B6%E5%9B%BE2.gif" alt=""></p><p><strong>条形图</strong><br>is_convert交换xy轴</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pyecharts import Bar</span><br><span class="line">bar=Bar(&quot;x轴与y轴交换&quot;)</span><br><span class="line">bar.add(&quot;商家A&quot;, attr, v1)</span><br><span class="line">bar.add(&quot;商家B&quot;, attr, v2, is_convert=True)</span><br><span class="line">bar.render()</span><br></pre></td></tr></table></figure><p><img src="http://phi87jf30.bkt.clouddn.com/%E6%9D%A1%E5%BD%A2%E5%9B%BE.png" alt=""></p><h2 id="Boxplot-箱型图"><a href="#Boxplot-箱型图" class="headerlink" title="Boxplot(箱型图)"></a>Boxplot(箱型图)</h2><blockquote><p>箱型图是一种用作显示一组数据分散情况资料的统计图。它能显示出一组数据的最大值、最小值、中位数、下四分位数以及上四分位数。</p></blockquote><p>Boxplot.add()方法</p><blockquote><p>add(name, x_axis, y_axis,**kwargs)</p></blockquote><p>可自行计算出所需要的五个值，也可通过内置prepare_data()转换,可将列表中的数据转换成嵌套的[min, Q1, median, Q3, max],如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   from pyecharts import Boxplot</span><br><span class="line">   </span><br><span class="line">   boxplot=Boxplot(&quot;箱型图&quot;)</span><br><span class="line">   x_axis=[&apos;expr1&apos;,&apos;expr2&apos;,&apos;expr3&apos;,&apos;expr4&apos;,&apos;expr5&apos;]</span><br><span class="line">   y_axis=[</span><br><span class="line">    [850, 740, 900, 1070, 930, 850, 950, 980, 980, 880,</span><br><span class="line">    1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960],</span><br><span class="line">    [960, 940, 960, 940, 880, 800, 850, 880, 900, 840,</span><br><span class="line">    830, 790, 810, 880, 880, 830, 800, 790, 760, 800],</span><br><span class="line">    [880, 880, 880, 860, 720, 720, 620, 860, 970, 950,</span><br><span class="line">    880, 910, 850, 870, 840, 840, 850, 840, 840, 840],</span><br><span class="line">    [890, 810, 810, 820, 800, 770, 760, 740, 750, 760,</span><br><span class="line">    910, 920, 890, 860, 880, 720, 840, 850, 850, 780],</span><br><span class="line">    [890, 840, 780, 810, 760, 810, 790, 810, 820, 850,</span><br><span class="line">    870, 870, 810, 740, 810, 940, 950, 800, 810, 870]</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">_yaxis=boxplot.prepare_data(y_axis)    #转换数据</span><br><span class="line">boxplot.add(&quot;boxplot&quot;, x_axis, _yaxis)</span><br><span class="line">boxplot.render()</span><br></pre></td></tr></table></figure><p><img src="http://phi87jf30.bkt.clouddn.com/%E7%AE%B1%E5%BD%A2%E5%9B%BE.png" alt=""></p><p>或者可以直接在add()转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   from pyecharts import Boxplot</span><br><span class="line"></span><br><span class="line">boxplot = Boxplot(&quot;箱形图&quot;)</span><br><span class="line">x_axis = [&apos;expr1&apos;, &apos;expr2&apos;]</span><br><span class="line">y_axis1 = [</span><br><span class="line">    [850, 740, 900, 1070, 930, 850, 950, 980, 980, 880,</span><br><span class="line">    1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960],</span><br><span class="line">    [960, 940, 960, 940, 880, 800, 850, 880, 900, 840,</span><br><span class="line">    830, 790, 810, 880, 880, 830, 800, 790, 760, 800],</span><br><span class="line">]</span><br><span class="line">y_axis2 = [</span><br><span class="line">    [890, 810, 810, 820, 800, 770, 760, 740, 750, 760,</span><br><span class="line">    910, 920, 890, 860, 880, 720, 840, 850, 850, 780],</span><br><span class="line">    [890, 840, 780, 810, 760, 810, 790, 810, 820, 850,</span><br><span class="line">    870, 870, 810, 740, 810, 940, 950, 800, 810, 870]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">boxplot.add(&quot;cat1&quot;,x_axis, boxplot.prepare_data(y_axis1))</span><br><span class="line">boxplot.add(&quot;cat2&quot;,x_axis, boxplot.prepare_data(y_axis2))</span><br><span class="line">boxplot_render()</span><br></pre></td></tr></table></figure></p><p><img src="http://phi87jf30.bkt.clouddn.com/%E7%AE%B1%E5%9E%8B%E5%9B%BE2.png" alt=""></p><h2 id="Geo-地理坐标系"><a href="#Geo-地理坐标系" class="headerlink" title="Geo(地理坐标系)"></a>Geo(地理坐标系)</h2><blockquote><p>地理坐标系组件用于地图的绘制，支持在地理坐标系上绘制散点图，线集</p></blockquote><p>Geo.add()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(name,attr, value, type=&quot;scatter&quot;,maptype=&apos;china&apos;,coordinate_region=&quot;中国&quot;,symbol_size=12,border_color=&apos;#323c48&apos;,geo_emphsis_color=&apos;#2a333d&apos;,geo_cities_coords=None,is_roam=True,**kwargs)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">   from pyecharts import Geo</span><br><span class="line">   data=[</span><br><span class="line">     (&quot;海门&quot;, 9),(&quot;鄂尔多斯&quot;, 12),(&quot;招远&quot;, 12),(&quot;舟山&quot;, 12),(&quot;齐齐哈尔&quot;, 14),(&quot;盐城&quot;, 15),</span><br><span class="line">    (&quot;赤峰&quot;, 16),(&quot;青岛&quot;, 18),(&quot;乳山&quot;, 18),(&quot;金昌&quot;, 19),(&quot;泉州&quot;, 21),(&quot;莱西&quot;, 21),</span><br><span class="line">    (&quot;日照&quot;, 21),(&quot;胶南&quot;, 22),(&quot;南通&quot;, 23),(&quot;拉萨&quot;, 24),(&quot;云浮&quot;, 24),(&quot;梅州&quot;, 25),</span><br><span class="line">    (&quot;文登&quot;, 25),(&quot;上海&quot;, 25),(&quot;攀枝花&quot;, 25),(&quot;威海&quot;, 25),(&quot;承德&quot;, 25),(&quot;厦门&quot;, 26),</span><br><span class="line">    (&quot;汕尾&quot;, 26),(&quot;潮州&quot;, 26),(&quot;丹东&quot;, 27),(&quot;太仓&quot;, 27),(&quot;曲靖&quot;, 27),(&quot;烟台&quot;, 28),</span><br><span class="line">    (&quot;福州&quot;, 29),(&quot;瓦房店&quot;, 30),(&quot;即墨&quot;, 30),(&quot;抚顺&quot;, 31),(&quot;玉溪&quot;, 31),(&quot;张家口&quot;, 31),</span><br><span class="line">    (&quot;阳泉&quot;, 31),(&quot;莱州&quot;, 32),(&quot;湖州&quot;, 32),(&quot;汕头&quot;, 32),(&quot;昆山&quot;, 33),(&quot;宁波&quot;, 33),</span><br><span class="line">    (&quot;湛江&quot;, 33),(&quot;揭阳&quot;, 34),(&quot;荣成&quot;, 34),(&quot;连云港&quot;, 35),(&quot;葫芦岛&quot;, 35),(&quot;常熟&quot;, 36),</span><br><span class="line">    (&quot;东莞&quot;, 36),(&quot;河源&quot;, 36),(&quot;淮安&quot;, 36),(&quot;泰州&quot;, 36),(&quot;南宁&quot;, 37),(&quot;营口&quot;, 37),</span><br><span class="line">    (&quot;惠州&quot;, 37),(&quot;江阴&quot;, 37),(&quot;蓬莱&quot;, 37),(&quot;韶关&quot;, 38),(&quot;嘉峪关&quot;, 38),(&quot;广州&quot;, 38),</span><br><span class="line">    (&quot;延安&quot;, 38),(&quot;太原&quot;, 39),(&quot;清远&quot;, 39),(&quot;中山&quot;, 39),(&quot;昆明&quot;, 39),(&quot;寿光&quot;, 40),</span><br><span class="line">    (&quot;盘锦&quot;, 40),(&quot;长治&quot;, 41),(&quot;深圳&quot;, 41),(&quot;珠海&quot;, 42),(&quot;宿迁&quot;, 43),(&quot;咸阳&quot;, 43),</span><br><span class="line">    (&quot;铜川&quot;, 44),(&quot;平度&quot;, 44),(&quot;佛山&quot;, 44),(&quot;海口&quot;, 44),(&quot;江门&quot;, 45),(&quot;章丘&quot;, 45),</span><br><span class="line">    (&quot;肇庆&quot;, 46),(&quot;大连&quot;, 47),(&quot;临汾&quot;, 47),(&quot;吴江&quot;, 47),(&quot;石嘴山&quot;, 49),(&quot;沈阳&quot;, 50),</span><br><span class="line">    (&quot;苏州&quot;, 50),(&quot;茂名&quot;, 50),(&quot;嘉兴&quot;, 51),(&quot;长春&quot;, 51),(&quot;胶州&quot;, 52),(&quot;银川&quot;, 52),</span><br><span class="line">    (&quot;张家港&quot;, 52),(&quot;三门峡&quot;, 53),(&quot;锦州&quot;, 54),(&quot;南昌&quot;, 54),(&quot;柳州&quot;, 54),(&quot;三亚&quot;, 54),</span><br><span class="line">    (&quot;自贡&quot;, 56),(&quot;吉林&quot;, 56),(&quot;阳江&quot;, 57),(&quot;泸州&quot;, 57),(&quot;西宁&quot;, 57),(&quot;宜宾&quot;, 58),</span><br><span class="line">    (&quot;呼和浩特&quot;, 58),(&quot;成都&quot;, 58),(&quot;大同&quot;, 58),(&quot;镇江&quot;, 59),(&quot;桂林&quot;, 59),(&quot;张家界&quot;, 59),</span><br><span class="line">    (&quot;宜兴&quot;, 59),(&quot;北海&quot;, 60),(&quot;西安&quot;, 61),(&quot;金坛&quot;, 62),(&quot;东营&quot;, 62),(&quot;牡丹江&quot;, 63),</span><br><span class="line">    (&quot;遵义&quot;, 63),(&quot;绍兴&quot;, 63),(&quot;扬州&quot;, 64),(&quot;常州&quot;, 64),(&quot;潍坊&quot;, 65),(&quot;重庆&quot;, 66),</span><br><span class="line">    (&quot;台州&quot;, 67),(&quot;南京&quot;, 67),(&quot;滨州&quot;, 70),(&quot;贵阳&quot;, 71),(&quot;无锡&quot;, 71),(&quot;本溪&quot;, 71),</span><br><span class="line">    (&quot;克拉玛依&quot;, 72),(&quot;渭南&quot;, 72),(&quot;马鞍山&quot;, 72),(&quot;宝鸡&quot;, 72),(&quot;焦作&quot;, 75),(&quot;句容&quot;, 75),</span><br><span class="line">    (&quot;北京&quot;, 79),(&quot;徐州&quot;, 79),(&quot;衡水&quot;, 80),(&quot;包头&quot;, 80),(&quot;绵阳&quot;, 80),(&quot;乌鲁木齐&quot;, 84),</span><br><span class="line">    (&quot;枣庄&quot;, 84),(&quot;杭州&quot;, 84),(&quot;淄博&quot;, 85),(&quot;鞍山&quot;, 86),(&quot;溧阳&quot;, 86),(&quot;库尔勒&quot;, 86),</span><br><span class="line">    (&quot;安阳&quot;, 90),(&quot;开封&quot;, 90),(&quot;济南&quot;, 92),(&quot;德阳&quot;, 93),(&quot;温州&quot;, 95),(&quot;九江&quot;, 96),</span><br><span class="line">    (&quot;邯郸&quot;, 98),(&quot;临安&quot;, 99),(&quot;兰州&quot;, 99),(&quot;沧州&quot;, 100),(&quot;临沂&quot;, 103),(&quot;南充&quot;, 104),</span><br><span class="line">    (&quot;天津&quot;, 105),(&quot;富阳&quot;, 106),(&quot;泰安&quot;, 112),(&quot;诸暨&quot;, 112),(&quot;郑州&quot;, 113),(&quot;哈尔滨&quot;, 114),</span><br><span class="line">    (&quot;聊城&quot;, 116),(&quot;芜湖&quot;, 117),(&quot;唐山&quot;, 119),(&quot;平顶山&quot;, 119),(&quot;邢台&quot;, 119),(&quot;德州&quot;, 120),</span><br><span class="line">    (&quot;济宁&quot;, 120),(&quot;荆州&quot;, 127),(&quot;宜昌&quot;, 130),(&quot;义乌&quot;, 132),(&quot;丽水&quot;, 133),(&quot;洛阳&quot;, 134),</span><br><span class="line">    (&quot;秦皇岛&quot;, 136),(&quot;株洲&quot;, 143),(&quot;石家庄&quot;, 147),(&quot;莱芜&quot;, 148),(&quot;常德&quot;, 152),(&quot;保定&quot;, 153),</span><br><span class="line">    (&quot;湘潭&quot;, 154),(&quot;金华&quot;, 157),(&quot;岳阳&quot;, 169),(&quot;长沙&quot;, 175),(&quot;衢州&quot;, 177),(&quot;廊坊&quot;, 193),</span><br><span class="line">    (&quot;菏泽&quot;, 194),(&quot;合肥&quot;, 229),(&quot;武汉&quot;, 273),(&quot;大庆&quot;, 279)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">geo=Geo(</span><br><span class="line">&quot;全国城市空气质量&quot;，&quot;data from pm2.5&quot;, title_color=&quot;#fff&quot;,title_pos=&quot;center&quot;,width=1200,height=600,background_color=&apos;#404a59&apos;,)</span><br><span class="line"></span><br><span class="line">attr,value = gep.cast(data)</span><br><span class="line">geo.add(</span><br><span class="line">&quot;&quot;,attr,value,visual_range=[0,200],visual_text_color=&quot;#fff&quot;,symbol_size=15,is_visualmap=True,</span><br><span class="line">)</span><br><span class="line">geo.render()</span><br></pre></td></tr></table></figure><p><img src="http://phi87jf30.bkt.clouddn.com/%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87%E5%9B%BE.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;可视化图表介绍：&lt;a href=&quot;https://mp.weixin.qq.com/s/v11B87yTnNA8U9GYr5iRXA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/v11B87yTnNA8U9GYr5iRXA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;没有任何的办法，只有一点点的写下去，虽然心很累，虽然不知道前面的什么，但是多记录一点总会是自己的财富，坚持吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://phi87jf30.bkt.clouddn.com/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据的可视化" scheme="https://black-house.github.io/tags/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>群发QQ邮件</title>
    <link href="https://black-house.github.io/2018/11/07/qq-spider/"/>
    <id>https://black-house.github.io/2018/11/07/qq-spider/</id>
    <published>2018-11-07T05:33:36.000Z</published>
    <updated>2018-11-08T09:40:08.839Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>多学习点实际有用的东西，让我们的生活变得更加的方便</p></blockquote><p><img src="http://phi87jf30.bkt.clouddn.com/qq2.jpg" alt=""><br><a id="more"></a></p><h1 id="一、抓取qq群里的成员信息"><a href="#一、抓取qq群里的成员信息" class="headerlink" title="一、抓取qq群里的成员信息"></a>一、抓取qq群里的成员信息</h1><p>本文主要介绍如何通过python实现自动群发邮件到qq群里面所有成员的邮箱中。</p><p><strong>首先需要了解的是获得qq群里所有成员的qq号</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">import time</span><br><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">class qqGroupSpider():</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    Q群爬虫类</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, driver, qq, passwd, qqgroup):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化根据用户信息登录到Q群管理界面</span><br><span class="line">        :param driver:</span><br><span class="line">        :param qq:</span><br><span class="line">        :param passwd:</span><br><span class="line">        :param qqgroup:</span><br><span class="line">        :param writefile:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        url = &quot;https://qun.qq.com/member.html#gid=&#123;&#125;&quot;.format(qqgroup)</span><br><span class="line">        self.driver = driver</span><br><span class="line">        driver.delete_all_cookies()</span><br><span class="line">        driver.get(url)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        driver.switch_to.frame(&quot;login_frame&quot;)  # 进入登录iframe</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        change = driver.find_element_by_id(&quot;switcher_plogin&quot;)</span><br><span class="line">        change.click()</span><br><span class="line">        driver.find_element_by_id(&apos;u&apos;).clear()  # 选择用户名框</span><br><span class="line">        driver.find_element_by_id(&apos;u&apos;).send_keys(qq)</span><br><span class="line">        driver.find_element_by_id(&apos;p&apos;).clear()</span><br><span class="line">        driver.find_element_by_id(&apos;p&apos;).send_keys(passwd)</span><br><span class="line">        driver.find_element_by_class_name(&quot;login_button&quot;).click()</span><br><span class="line">        time.sleep(1)</span><br><span class="line"></span><br><span class="line">    def scroll_foot(self, driver):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        控制屏幕向下滚动到底部</span><br><span class="line">        :param driver:</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        js = &quot;var q=document.documentElement.scrollTop=100000&quot;</span><br><span class="line">        return driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">    def getTbodyList(self, driver):</span><br><span class="line">        print(&quot;getTbodyList()函数运行过&quot;)</span><br><span class="line">        return driver.find_elements_by_xpath(&apos;//div[@class=&quot;group-memeber&quot;]//tbody[contains(@class,&quot;list&quot;)]&apos;)</span><br><span class="line"></span><br><span class="line">    def parseTbody(self, html):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        解析tbody里面的内容，一个tbody里面有多个成员，</span><br><span class="line">        解析完成后，返回成员基本情况的列表</span><br><span class="line">        :param html:</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        # selector = etree.HTML(html)</span><br><span class="line">        print(&quot;parseTbody()函数运行过&quot;)</span><br><span class="line">        memberLists = []</span><br><span class="line">        for each in html:</span><br><span class="line">            memberList = each.find_elements_by_xpath(&apos;tr[contains(@class,&quot;mb mb&quot;)]&apos;)</span><br><span class="line">            memberLists += memberList</span><br><span class="line"></span><br><span class="line">        print(&quot;memberLists长度为：&#123;&#125;&quot;.format(len(memberLists)))</span><br><span class="line">        memberLists_data = []</span><br><span class="line">        for each in memberLists:</span><br><span class="line">            memberLists_data.append(self.parseMember(each))</span><br><span class="line">        return memberLists_data</span><br><span class="line"></span><br><span class="line">    def parseMember(self, mb):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        解析每个人各项描述，以逗号隔开，返回一个成员的基本情况</span><br><span class="line">        :param mb:</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        print(&quot;parseMember()函数运行过&quot;)</span><br><span class="line"></span><br><span class="line">        td = mb.find_elements_by_xpath(&apos;td&apos;)</span><br><span class="line">        print(&quot;td长度为：&#123;&#125;&quot;.format(len(td)))</span><br><span class="line"></span><br><span class="line">        qId = td[1].text.strip()</span><br><span class="line">        nickName = td[2].find_element_by_xpath(&apos;span&apos;).text.strip()</span><br><span class="line">        card = td[3].find_element_by_xpath(&apos;span&apos;).text.strip()</span><br><span class="line">        qq = td[4].text.strip()</span><br><span class="line">        sex = td[5].text.strip()</span><br><span class="line">        qqAge = td[6].text.strip()</span><br><span class="line">        joinTime = td[7].text.strip()</span><br><span class="line">        lastTime = td[8].text.strip()</span><br><span class="line"></span><br><span class="line">        a = (qId + &quot;|&quot; + qq + &quot;|&quot; + nickName + &quot;|&quot; + card + &quot;|&quot; + sex + &quot;|&quot; + qqAge + &quot;|&quot; + joinTime + &quot;|&quot; + lastTime)</span><br><span class="line">        print(a)</span><br><span class="line">        return a</span><br><span class="line"></span><br><span class="line">    def parseAndWrite(self, tbody):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        解析HTML中的tbody，解析完成后写入到本地文件</span><br><span class="line">        :param tbody:</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        print(&quot;parseAndWrite()函数运行过&quot;)</span><br><span class="line"></span><br><span class="line">        memberList = self.parseTbody(tbody)</span><br><span class="line"></span><br><span class="line">        with open(&quot;C:\\Users\\lenovo\\Desktop\\qq\\shangda.txt&quot;, &apos;a&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">            for each in memberList:</span><br><span class="line">                f.write(str(each) + &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    qq = str(input(&quot;请输入您的qq号:&quot;))</span><br><span class="line">    passwd = str(input(&quot;请输入您的qq密码:&quot;))</span><br><span class="line">    qqgroup = str(input(&quot;请输入您的qq群号:&quot;))</span><br><span class="line"></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    spider = qqGroupSpider(driver, qq, passwd, qqgroup)</span><br><span class="line">    time.sleep(10)</span><br><span class="line">    # 找到QQ群的人数，这里由于群人数被隐藏获取不是很方便。可以目测获得</span><br><span class="line">    qqNum = 307</span><br><span class="line">    print(&quot;QQ群人数为：&quot; + str(qqNum))</span><br><span class="line">    curren_qq_num = 0</span><br><span class="line">    prelen = 0</span><br><span class="line"></span><br><span class="line">    while curren_qq_num != qqNum:</span><br><span class="line">        curren_qq_num = len(driver.find_elements_by_xpath(&apos;//*[@id=&quot;groupMember&quot;]//td[contains(@class,&quot;td-no&quot;)]&apos;))</span><br><span class="line">        # 不停的向下滚动屏幕，直到底部</span><br><span class="line">        spider.scroll_foot(driver)</span><br><span class="line">        # 每次滚动休息1秒</span><br><span class="line">        time.sleep(1)</span><br><span class="line"></span><br><span class="line">        tlist = spider.getTbodyList(driver)</span><br><span class="line"></span><br><span class="line">        spider.parseAndWrite(tlist[prelen:])</span><br><span class="line"></span><br><span class="line">        prelen = len(tlist)  # 更新tbody列表的长度</span><br><span class="line"></span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p><em>代码来源：<a href="https://blog.csdn.net/qq_38251616/article/details/82963395" target="_blank" rel="noopener">https://blog.csdn.net/qq_38251616/article/details/82963395</a></em></p><h1 id="二、python实现自动发送邮件"><a href="#二、python实现自动发送邮件" class="headerlink" title="二、python实现自动发送邮件"></a>二、python实现自动发送邮件</h1><p>其次介绍如何使用python自动发送邮件？<br><strong>注意</strong>：Python自动发送邮件需要注意的我们需要首先开启发送方邮箱的smtp相关服务，否则会出现以下报错：</p><blockquote><ol><li>SMTPAuthenticationError: (535,’Error: authentication failed’)</li><li>SMTPAuthenticationError: (550,’\xd3\xc3\xbb\xa7\xce\xde\xc8\xa8\xb5\xc7\xc2\xbd’)</li></ol></blockquote><p>以qq邮箱作为发送邮箱为例，qq邮箱的<a href="https://jingyan.baidu.com article/0f5fb099dffe7c6d8334ea31.html" target="_blank" rel="noopener">smtp服务开启</a></p><p>完成smtp服务的开启之后我们可以通过下面的代码实现简单的邮件发送<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">   #其中的smtplib，email模块都是python自带的无需安装</span><br><span class="line">#coding=utf-8</span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.header import Header</span><br><span class="line"></span><br><span class="line">def send_email(SMTP_host, from_account, from_password, to_account, subject, content):</span><br><span class="line">       #注意：这里的passwd是开启smtp后给的验证码</span><br><span class="line">    # 1. 实例化SMTP</span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line"></span><br><span class="line">    # 2. 链接邮件服务器</span><br><span class="line">    smtp.connect(SMTP_host)</span><br><span class="line"></span><br><span class="line">    # 3. 配置发送邮箱的用户名和密码</span><br><span class="line">    smtp.login(from_account, from_password)</span><br><span class="line"></span><br><span class="line">    # 4. 配置发送内容msg</span><br><span class="line">    msg = MIMEText(content, &apos;plain&apos;, &apos;utf-8&apos;)</span><br><span class="line">    msg[&apos;Subject&apos;] = Header(subject,&apos;utf-8&apos;)</span><br><span class="line">    msg[&apos;From&apos;] = from_account</span><br><span class="line">    msg[&apos;To&apos;] = to_account</span><br><span class="line"></span><br><span class="line">    # 5. 配置发送邮箱，接受邮箱，以及发送内容</span><br><span class="line">    smtp.sendmail(from_account, to_account, msg.as_string())</span><br><span class="line"></span><br><span class="line">    # 6. 关闭邮件服务</span><br><span class="line">    smtp.quit()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    send_email(&quot;smtp.163.com&quot;, &quot;from_account&quot;, &quot;from_pssword&quot;,&quot;to_account&quot;, &quot;I want to talk to u&quot;, &quot;In this semester&quot;)</span><br></pre></td></tr></table></figure></p><p><em>代码来源：<a href="https://www.cnblogs.com/lesleysbw/p/5897224.html" target="_blank" rel="noopener">https://www.cnblogs.com/lesleysbw/p/5897224.html</a></em></p><h1 id="三、完整的实现python向qq群成员发送邮箱代码"><a href="#三、完整的实现python向qq群成员发送邮箱代码" class="headerlink" title="三、完整的实现python向qq群成员发送邮箱代码"></a>三、完整的实现python向qq群成员发送邮箱代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">  import time</span><br><span class="line">  from selenium import webdriver</span><br><span class="line">  import smtplib</span><br><span class="line">  from email.mime.text import MIMEText</span><br><span class="line">  from email.header import Header</span><br><span class="line"></span><br><span class="line">  class qqGroupSpider():</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    Q群爬虫类</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, driver, qq, passwd, qqgroup):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化根据用户信息登录到Q群管理界面</span><br><span class="line">        :param driver:</span><br><span class="line">        :param qq:</span><br><span class="line">        :param passwd:</span><br><span class="line">        :param qqgroup:</span><br><span class="line">        :param writefile:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        url = &quot;https://qun.qq.com/member.html#gid=&#123;&#125;&quot;.format(qqgroup)</span><br><span class="line">        self.driver = driver</span><br><span class="line">        driver.delete_all_cookies()</span><br><span class="line">        driver.get(url)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        driver.switch_to.frame(&quot;login_frame&quot;)  # 进入登录iframe</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        change = driver.find_element_by_id(&quot;switcher_plogin&quot;)</span><br><span class="line">        change.click()</span><br><span class="line">        driver.find_element_by_id(&apos;u&apos;).clear()  # 选择用户名框</span><br><span class="line">        driver.find_element_by_id(&apos;u&apos;).send_keys(qq)</span><br><span class="line">        driver.find_element_by_id(&apos;p&apos;).clear()</span><br><span class="line">        driver.find_element_by_id(&apos;p&apos;).send_keys(passwd)</span><br><span class="line">        driver.find_element_by_class_name(&quot;login_button&quot;).click()</span><br><span class="line">        time.sleep(1)</span><br><span class="line"></span><br><span class="line">    def scroll_foot(self, driver):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        控制屏幕向下滚动到底部</span><br><span class="line">        :param driver:</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        js = &quot;var q=document.documentElement.scrollTop=100000&quot;</span><br><span class="line">        return driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">    def getTbodyList(self, driver):</span><br><span class="line">        print(&quot;getTbodyList()函数运行过&quot;)</span><br><span class="line">        return driver.find_elements_by_xpath(&apos;//div[@class=&quot;group-memeber&quot;]//tbody[contains(@class,&quot;list&quot;)]&apos;)</span><br><span class="line"></span><br><span class="line">    def parseTbody(self, html):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        解析tbody里面的内容，一个tbody里面有多个成员，</span><br><span class="line">        解析完成后，返回成员基本情况的列表</span><br><span class="line">        :param html:</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        # selector = etree.HTML(html)</span><br><span class="line">        print(&quot;parseTbody()函数运行过&quot;)</span><br><span class="line">        memberLists = []</span><br><span class="line">        for each in html:</span><br><span class="line">            memberList = each.find_elements_by_xpath(&apos;tr[contains(@class,&quot;mb mb&quot;)]&apos;)</span><br><span class="line">            memberLists += memberList</span><br><span class="line"></span><br><span class="line">        print(&quot;memberLists长度为：&#123;&#125;&quot;.format(len(memberLists)))</span><br><span class="line">        memberLists_data = []</span><br><span class="line">        for each in memberLists:</span><br><span class="line">            memberLists_data.append(self.parseMember(each))</span><br><span class="line">        return memberLists_data</span><br><span class="line"></span><br><span class="line">    def parseMember(self, mb):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        解析每个人各项描述，以逗号隔开，返回一个成员的基本情况</span><br><span class="line">        :param mb:</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        print(&quot;parseMember()函数运行过&quot;)</span><br><span class="line"></span><br><span class="line">        td = mb.find_elements_by_xpath(&apos;td&apos;)</span><br><span class="line">        print(&quot;td长度为：&#123;&#125;&quot;.format(len(td)))</span><br><span class="line"></span><br><span class="line">        qId = td[1].text.strip()</span><br><span class="line">        nickName = td[2].find_element_by_xpath(&apos;span&apos;).text.strip()</span><br><span class="line">        card = td[3].find_element_by_xpath(&apos;span&apos;).text.strip()</span><br><span class="line">        qq = td[4].text.strip()</span><br><span class="line">        sex = td[5].text.strip()</span><br><span class="line">        qqAge = td[6].text.strip()</span><br><span class="line">        joinTime = td[7].text.strip()</span><br><span class="line">        lastTime = td[8].text.strip()</span><br><span class="line"></span><br><span class="line">        a = (qId + &quot;|&quot; + qq + &quot;|&quot; + nickName + &quot;|&quot; + card + &quot;|&quot; + sex + &quot;|&quot; + qqAge + &quot;|&quot; + joinTime + &quot;|&quot; + lastTime)</span><br><span class="line">        print(a)</span><br><span class="line">        return a</span><br><span class="line"></span><br><span class="line">    def parseAndWrite(self, tbody):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        解析HTML中的tbody，解析完成后写入到本地文件</span><br><span class="line">        :param tbody:</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        print(&quot;parseAndWrite()函数运行过&quot;)</span><br><span class="line"></span><br><span class="line">        memberList = self.parseTbody(tbody)</span><br><span class="line"></span><br><span class="line">        with open(&quot;C:\\Users\\lenovo\\Desktop\\qq\\shangda.txt&quot;, &apos;a&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">            for each in memberList:</span><br><span class="line">                f.write(str(each) + &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    qq = str(input(&quot;请输入您的qq号:&quot;))</span><br><span class="line">    passwd = str(input(&quot;请输入您的qq密码:&quot;))</span><br><span class="line">    qqgroup = str(input(&quot;请输入您的qq群号:&quot;))</span><br><span class="line"></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    spider = qqGroupSpider(driver, qq, passwd, qqgroup)</span><br><span class="line">    time.sleep(10)</span><br><span class="line">    # 找到QQ群的人数，这里由于群人数被隐藏获取不是很方便。可以目测获得</span><br><span class="line">    qqNum = 307</span><br><span class="line">    print(&quot;QQ群人数为：&quot; + str(qqNum))</span><br><span class="line">    curren_qq_num = 0</span><br><span class="line">    prelen = 0</span><br><span class="line"></span><br><span class="line">    while curren_qq_num != qqNum:</span><br><span class="line">        curren_qq_num = len(driver.find_elements_by_xpath(&apos;//*[@id=&quot;groupMember&quot;]//td[contains(@class,&quot;td-no&quot;)]&apos;))</span><br><span class="line">        # 不停的向下滚动屏幕，直到底部</span><br><span class="line">        spider.scroll_foot(driver)</span><br><span class="line">        # 每次滚动休息1秒</span><br><span class="line">        time.sleep(1)</span><br><span class="line"></span><br><span class="line">        tlist = spider.getTbodyList(driver)</span><br><span class="line"></span><br><span class="line">        spider.parseAndWrite(tlist[prelen:])</span><br><span class="line"></span><br><span class="line">        prelen = len(tlist)  # 更新tbody列表的长度</span><br><span class="line"></span><br><span class="line">    driver.quit()</span><br><span class="line">   </span><br><span class="line">def send_email(SMTP_host, from_account, from_password, to_account, subject, content):</span><br><span class="line">       #注意：这里的passwd是开启smtp后给的验证码</span><br><span class="line">    # 1. 实例化SMTP</span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line"></span><br><span class="line">    # 2. 链接邮件服务器</span><br><span class="line">    smtp.connect(SMTP_host)</span><br><span class="line"></span><br><span class="line">    # 3. 配置发送邮箱的用户名和密码</span><br><span class="line">    smtp.login(from_account, from_password)</span><br><span class="line"></span><br><span class="line">    # 4. 配置发送内容msg</span><br><span class="line">    msg = MIMEText(content, &apos;plain&apos;, &apos;utf-8&apos;)</span><br><span class="line">    msg[&apos;Subject&apos;] = Header(subject,&apos;utf-8&apos;)</span><br><span class="line">    msg[&apos;From&apos;] = from_account</span><br><span class="line">    msg[&apos;To&apos;] = to_account</span><br><span class="line"></span><br><span class="line">    # 5. 配置发送邮箱，接受邮箱，以及发送内容</span><br><span class="line">    smtp.sendmail(from_account, to_account, msg.as_string())</span><br><span class="line"></span><br><span class="line">    # 6. 关闭邮件服务</span><br><span class="line">    smtp.quit()</span><br><span class="line">#单进程</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br><span class="line">       with open(&quot;&quot;,&apos;r&apos;) as f:</span><br><span class="line">           for line in f.readlines():</span><br><span class="line">               m=line.split(&apos;|&apos;)[1]</span><br><span class="line">               smtp_host = smtp.qq.com</span><br><span class="line">               from_account=your_account</span><br><span class="line">               from_pssword=your_password</span><br><span class="line">               to_account=m@qq.com</span><br><span class="line">       send_email(&quot;smtp_host&quot;, &quot;from_account&quot;, &quot;from_pssword&quot;,&quot;to_account&quot;, &quot;I want to talk to u&quot;, &quot;In this semester&quot;)</span><br><span class="line">    #多进程</span><br><span class="line">    改写send_email函数</span><br><span class="line">    def send_email(to_account):</span><br><span class="line">       #注意：这里的passwd是开启smtp后给的验证码</span><br><span class="line">    # 1. 实例化SMTP</span><br><span class="line">       SMTP_host=&apos;smtp.qq.com&apos;</span><br><span class="line">    from_account=&apos;1159520248@qq.com&apos;</span><br><span class="line">    from_password=&apos;ljahyylibmzxbabd&apos;</span><br><span class="line">    subject=&apos;I want to talk to u&apos;</span><br><span class="line">    content=&apos;In this semester&apos;</span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line"></span><br><span class="line">    # 2. 链接邮件服务器</span><br><span class="line">    smtp.connect(SMTP_host)</span><br><span class="line"></span><br><span class="line">    # 3. 配置发送邮箱的用户名和密码</span><br><span class="line">    smtp.login(from_account, from_password)</span><br><span class="line"></span><br><span class="line">    # 4. 配置发送内容msg</span><br><span class="line">    msg = MIMEText(content, &apos;plain&apos;, &apos;utf-8&apos;)</span><br><span class="line">    msg[&apos;Subject&apos;] = Header(subject,&apos;utf-8&apos;)</span><br><span class="line">    msg[&apos;From&apos;] = from_account</span><br><span class="line">    msg[&apos;To&apos;] = to_account</span><br><span class="line"></span><br><span class="line">    # 5. 配置发送邮箱，接受邮箱，以及发送内容</span><br><span class="line">    smtp.sendmail(from_account, to_account, msg.as_string())</span><br><span class="line">    from multiprocessing import Pool</span><br><span class="line">    if __name__ == &apos;__main__&apos;:</span><br><span class="line">       main()</span><br><span class="line">       m=[]</span><br><span class="line">       with open(&quot;&quot;,&apos;r&apos;) as f:</span><br><span class="line">           for line in f.readlines():</span><br><span class="line">               m=line.split(&apos;|&apos;)[1]+&apos;@qq.com&apos;</span><br><span class="line">               m.append(m)</span><br><span class="line">        pool=Pool(4)</span><br><span class="line">        pool.map(send_email, m)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;多学习点实际有用的东西，让我们的生活变得更加的方便&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://phi87jf30.bkt.clouddn.com/qq2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="pthon爬虫" scheme="https://black-house.github.io/tags/pthon%E7%88%AC%E8%99%AB/"/>
    
      <category term="QQ群号" scheme="https://black-house.github.io/tags/QQ%E7%BE%A4%E5%8F%B7/"/>
    
      <category term="自动发送邮件" scheme="https://black-house.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫篇(二)</title>
    <link href="https://black-house.github.io/2018/11/05/python_scrapy/"/>
    <id>https://black-house.github.io/2018/11/05/python_scrapy/</id>
    <published>2018-11-05T12:01:02.000Z</published>
    <updated>2018-12-03T06:48:03.565Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://phi87jf30.bkt.clouddn.com/1.jpg" alt=""><br><a id="more"></a></p><h1 id="Scrapy的框架爬虫"><a href="#Scrapy的框架爬虫" class="headerlink" title="Scrapy的框架爬虫"></a>Scrapy的框架爬虫</h1><p>提问： 为什么使用scrapy框架来写爬虫 ？</p><p>在python爬虫中：requests  +  selenium  可以解决目前90%的爬虫需求，难道scrapy 是解决剩下的10%的吗？显然不是。scrapy框架是为了让我们的爬虫更强大、更高效。<br>但是对于一些中小型的爬虫任务来讲，Scrapy确实是非常好的选择，它避免了我们来写一些重复的代码，并且有着出色的性能。我们自己写代码的时候，比如为了提高爬取效率，每次都自己码多线程或异步等代码，大大浪费了开发时间。这时候使用已经写好的框架是再好不过的选择了，我们只要简单的写写解析规则和pipeline等就好了。</p><p>scrapy是python开发的一个快速、高层次的屏幕抓取和web抓取的框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试。scrapy吸引人的地方在于它是一个框架，任何人都可以根据需要方便的修改。它也提供了多种类型爬虫的基类，如BaseSpider、sitemap爬虫等，最新版本还提供web2.0爬虫的支持。</p><h2 id="流程框架"><a href="#流程框架" class="headerlink" title="流程框架"></a>流程框架</h2><ol><li>抓取第一个页面<br>请求第一页的URL并得到源代码，进行下一页分析</li><li>获取内容和下一页的链接<br>分析源代码，提取翻页内容，获取下一页链接等待进一步爬取</li><li>翻页爬取<br>请求下一页的信息，分析内容并请求下一页的链接</li><li>保存运行结果<br>将爬取文件存为特定的格式的文件或者存入数据库</li></ol><h2 id="scrapy框架"><a href="#scrapy框架" class="headerlink" title="scrapy框架"></a>scrapy框架</h2><p>Scrapy是一个快速的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用来数据挖掘，舆情分析和自动化测试。</p><p><img src="http://phi87jf30.bkt.clouddn.com/scrapy.png" alt=""></p><ol><li>引擎（scrapy Engine）:用来处理整个系统的数据流处理，触发事务</li><li>调度器（Scheduler）:用来接受引擎发过来的请求，压入队列中，并在引擎再次请求时候返回。可以决定下载器下一步要下载的网址并去除重复网址</li><li>下载器（Downloader）:用来下载网页内容，并将网页内容返回给爬虫（spiders）。</li><li>爬虫（Spiders）：从特定网页中提取出需要的信息。可以用它来制定特定网页的解析规则，提取特定的实体（item）或者URL链接。每一个spider负责一个或者多个特定的网站</li><li>项目管道（item Pipeline）:负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</li><li>下载器中间件(Downloader Middlewares):位于Scrapy引擎和下载器之间的子框架，主要是处理Scrapy引擎与下载器之间的请求以及响应。</li><li>爬虫中间件（Spider Middlewares）:介于Scrapy引擎和爬虫之间的框架，主要工作是处理爬虫的响应输入和请求输出。</li><li>调度中间件（Scheduler Middewares）:介于Scrapy引擎和调度之间的中间件，处理从scrapy引擎发送的调度请求和响应。</li></ol><h2 id="建立scrapy爬虫项目具体代码及命令"><a href="#建立scrapy爬虫项目具体代码及命令" class="headerlink" title="建立scrapy爬虫项目具体代码及命令"></a>建立scrapy爬虫项目具体代码及命令</h2><ol><li>生成scrapy工程项目，项目名为Lspider<br>scrapy startproject Lspider</li><li>进入生成的工程目录中<br>cd Lspider</li><li>生成爬虫文件，名为L,爬虫网站域名m.com<br>scrapy genspider -t basic L m.com</li><li>运行爬虫程序 scrapy crawl 爬虫名<br>当运行单个爬虫文件 Scrapy runspider <strong>first.py</strong></li></ol><p><img src="http://phi87jf30.bkt.clouddn.com/project.png" alt=""></p><p>文件说明：</p><ul><li>scrapy.cfg  项目的主配置信息，用来部署scrapy时使用，爬虫相关的配置信息在settings.py文件中。</li><li>items.py    设置数据存储模板，用于结构化数据，如：Django的Model</li><li>pipelines    数据处理行为，如：一般结构化的数据持久化</li><li>settings.py 配置文件，如：递归的层数、并发数，延迟下载等。强调:配置文件的选项必须大写否则视为无效，正确写法USER_AGENT=‘xxxx‘</li><li>spiders      爬虫目录，如：创建文件，编写爬虫规则</li></ul><p><strong>注意：一般创建爬虫文件时，以网站域名命名</strong></p><p>信运部职责和作用<br>快速，正确，稳定的支撑公司业务的跨速发展</p><p>信运部主要系统结构</p><p>核心系统：<br>        CRM      BOSS</p><p>现有系统的功能完善</p><p>开发新系统</p><p>软件+虚拟机<br>规建部、业开部、维护部、服务部、计划部、厂商</p><p>软件+物理机</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://phi87jf30.bkt.clouddn.com/1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="https://black-house.github.io/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫篇(一)</title>
    <link href="https://black-house.github.io/2018/11/05/python-spider-one/"/>
    <id>https://black-house.github.io/2018/11/05/python-spider-one/</id>
    <published>2018-11-05T01:47:57.000Z</published>
    <updated>2018-11-15T08:26:46.818Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>注：不要左顾右盼。慢慢积累，慢慢写吧。毕竟除了这样单调的努力，我什么也做不了。 </strong></p></blockquote><p><img src="http://phi87jf30.bkt.clouddn.com/jianchi.jpg" alt=""><br><a id="more"></a></p><ul><li>爬虫原理简介</li><li></li></ul><h1 id="爬虫原理简介"><a href="#爬虫原理简介" class="headerlink" title="爬虫原理简介"></a>爬虫原理简介</h1><p>   爬虫主要分为三个过程<br><img src="http://phi87jf30.bkt.clouddn.com/%E7%88%AC%E8%99%AB%E6%B5%81%E7%A8%8B.png" alt=""><br>   <strong>1. 针对对象发送请求</strong><br>   这里的对象主要分为静态网页和动态网页。<br>静态网页通过get, post方法就可以搞定，如：豆瓣、糗事百科、腾讯新闻等<br>动态网页主要会遇到Ajax异步加载的网页. 解决方法：1. requests.get方法解决，点击下方的加载更多，然后在network中找到它</p><p>的API请求. 2. selenium模拟浏览器法。个人认为在异步加载的动态网页中通过selenium方法会更加的方便，后面都会介绍具体的案例。<br>   <strong>2. 获取响应内容</strong><br>  如果服务器能正常200响应, 则会得到一个Response<br>   <strong>3. 解析内容</strong><br>  解析html内容： 正则表达式(re模块)，第三方解析库如 Beautifulsoup,Xpath, pyquery等<br>解析json模块: 这种一般是通过抓包工具获得的数据包<br>解析二进制数据： 以wb的方式写入文件<br>   <strong>4. 保存数据</strong><br>文件形式：纯文本，json, xml等<br>关系型数据库:Mysql, SqlServer<br>非关系型数据库:Mongodb, Ridis</p><h1 id="内容解析问题的方法"><a href="#内容解析问题的方法" class="headerlink" title="内容解析问题的方法"></a>内容解析问题的方法</h1><p><strong>Xpath, find_all, find以及正则表达式</strong></p><ol><li><p>XPath:<br>是一门在XML文档中查找信息的语言。 Xpath可以用来在XML文档中对元素和属性进行遍历。<br>在Xpath中，有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释以及文档（根）节点。XML文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。<br><strong>绝对路径：从根目录开始一级一级的查找，相对路径：从任意制定的位置开始查找</strong><br>应用代码: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">driver=webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(10)</span><br><span class="line">driver.get(url3)</span><br><span class="line">time.sleep(3)</span><br><span class="line">html=etree.HTML(driver.page_source)</span><br><span class="line">all_img_list=[]</span><br><span class="line">img_group_list = html.xpath(&quot;//img[contains(@id,&apos;J_normal&apos;)]&quot;)</span><br><span class="line">print(len(img_group_list))</span><br><span class="line">for img_group in img_group_list:</span><br><span class="line">   img_of_group = img_group.xpath(&quot;.//@data-original | .//@data-img-back | .//@data-img-side&quot;)</span><br><span class="line">   print(img_of_group)</span><br><span class="line">   all_img_list.append(img_of_group[0])</span><br><span class="line">print(len(all_img_list))</span><br><span class="line">print(all_img_list)</span><br></pre></td></tr></table></figure></li><li><p>find_all<br>find_all(tag, attributes, recursive, text, limit, keywords)</p></li></ol><ul><li>tage: 标签 返回一个列表</li><li>attrs: 属性参数 是用一个python字典封装一个标签的若干属性和对应的属性值，注意是对一个标签的属性，所以一定要指明这个标签 <blockquote><p>soup.find(attrs={‘data-custom’:’xxx’})以及 soup.find(attrs={‘class’:’xxx’})<br>链接：<a href="https://www.jianshu.com/p/ef2f246cae46" target="_blank" rel="noopener">https://www.jianshu.com/p/ef2f246cae46</a></p></blockquote></li></ul><p><strong>注：find与find_all类似，主要区别在与find_all返回的是列表</strong></p><ol start="3"><li>正则表达式中常用的字符含义<br><img src="http://phi87jf30.bkt.clouddn.com/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%A6%E5%8F%B7%E8%A1%A8%E6%A0%BC.png" alt=""></li></ol><p><em>来源: <a href="https://www.jb51.net/article/65286.htm" target="_blank" rel="noopener">https://www.jb51.net/article/65286.htm</a></em></p><p>（1）数量词的贪婪模式与非贪婪模式<br>正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab<em>”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab</em>?”，将找到”a”。<br>注：我们一般使用非贪婪模式来提取。<br>（2）反斜杠问题<br>与大多数编程语言相同，正则表达式里使用”\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\”：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。<br>Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r”\”表示。同样，匹配一个数字的”\d”可以写成r”\d”。有了原生字符串，妈妈也不用担心是不是漏写了反斜杠，写出来的表达式也更直观勒。</p><p><strong>re的核心函数</strong><br>compile()函数</p><ul><li>函数定义：compile(pattern, flag=0)</li><li>函数描述：编译正则表达式pattern,然后返回正则表达式对象</li><li>pattern=re.compile()  预编译<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">re.match(pattern, string, flags=0)</span><br><span class="line">如果字符串的开头能匹配正则表达式，返回对应的match的对象，否则None</span><br><span class="line">re.search(pattern, string, flags=0)</span><br><span class="line">在字符串中查找，是否能匹配正则表达式，若是，返回对应的match对象，否则返回None</span><br><span class="line">re.split(pattern, string, maxsplit=0, flags=0)</span><br><span class="line">使用正则表达式分离字符串。如果括号将正则表达式括起来，那么匹配的字符串也会被列入到list中返回。Maxsplit是分离的次数，maxsplit=1表示分离一次，默认0,不限次数</span><br><span class="line">re. findall() </span><br><span class="line">返回的是list</span><br><span class="line">re.sub( pattern ,repl ,string,count=0,): 替换</span><br></pre></td></tr></table></figure></li></ul><p><strong>匹配对象的方法</strong><br>group方法</p><ul><li>方法定义：group(num=0)</li><li>方法描述：返回这个匹配对象，或者特殊编号的字组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">s1 = &apos;我12345+abcde&apos;</span><br><span class="line">pattern字符串前加 “ r ” 表示原生字符串</span><br><span class="line">pattern = r&apos;\w+&apos;</span><br><span class="line">pattern_compile = re.compile(pattern)</span><br><span class="line">返回匹配的字符串</span><br><span class="line">result1 = re.match(pattern_compile, s1).group()</span><br><span class="line">返回匹配开始的位置</span><br><span class="line">result2 = re.match(pattern_compile, s1).start() </span><br><span class="line">返回匹配结束的位置</span><br><span class="line">result3 = re.match(pattern_compile, s1).end() </span><br><span class="line">返回一个元组包含匹配 (开始,结束) 的位置</span><br><span class="line">result4 = re.match(pattern_compile, s1).span() </span><br><span class="line">print(result1)</span><br><span class="line">print(result2)</span><br><span class="line">print(result3)</span><br><span class="line">print(result4)</span><br><span class="line">我12345</span><br><span class="line">0</span><br><span class="line">6</span><br><span class="line">(0, 6)</span><br></pre></td></tr></table></figure></li></ul><p><strong>groups方法</strong></p><ul><li>方法定义：groups(default=None)</li><li>方法描述： 返回一个含有所有匹配子组的元组，匹配失败则返回空元组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">s1 = &apos;我12345+abcde&apos;</span><br><span class="line">pattern字符串前加 “ r ” 表示原生字符串</span><br><span class="line">pattern = r&apos;(\w+)\+(\w+)&apos;</span><br><span class="line">pattern_compile = re.compile(pattern)</span><br><span class="line">返回含有所有子组的元组</span><br><span class="line">result1 = re.search(pattern_compile, s1).groups()</span><br><span class="line">print(result1)</span><br><span class="line">(&apos;我12345&apos;, &apos;abcde&apos;)</span><br></pre></td></tr></table></figure><p>最后附加一个静态网页的数据抓取的案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">url = &apos;https://knewone.com/discover?page=&apos;</span><br><span class="line">def get_page(url, data=None):</span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(res.text, &apos;lxml&apos;)</span><br><span class="line">    images = soup.select(&apos;a.cover-inner &gt; img&apos;)</span><br><span class="line">    titles = soup.select(&apos;section.content &gt; h4 &gt; a&apos;)</span><br><span class="line">    links = soup.select(&apos;section.content &gt; h4 &gt; a&apos;)</span><br><span class="line">    if data==None:</span><br><span class="line">        for image, title, link in zip(images, titles, links):</span><br><span class="line">         #zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</span><br><span class="line">            data = &#123;&apos;image&apos;: image.get(&apos;src&apos;),</span><br><span class="line">                    &apos;title&apos;: title.get(&apos;title&apos;),</span><br><span class="line">                    &apos;link&apos;: link.get(&apos;href&apos;)</span><br><span class="line">                    &#125;</span><br><span class="line">            print(data)</span><br><span class="line">def get_more_page(start, end):</span><br><span class="line">    for one in range(start, end):</span><br><span class="line">        get_page(url + str(one))</span><br><span class="line">        time.sleep(2)</span><br><span class="line"></span><br><span class="line">get_more_page(5, 15)</span><br></pre></td></tr></table></figure><h1 id="Ajax异步加载动态页面问题"><a href="#Ajax异步加载动态页面问题" class="headerlink" title="Ajax异步加载动态页面问题"></a>Ajax异步加载动态页面问题</h1><ol><li>获取数据源问题 – 模拟登录, 异步加载</li><li>数据解析问题    </li></ol><p>正如上篇所提到的处理该问题主要有两种方法，在本节我们重点介绍第二种方法，因为我认为通过selenium模拟浏览器可以方便快速的解决该问题。</p><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p>首先我们来介绍下selenium<br><em>来源: <a href="https://blog.csdn.net/u010986776/article/details/79266448" target="_blank" rel="noopener">https://blog.csdn.net/u010986776/article/details/79266448</a>)</em></p><ul><li>通常反爬的手段的方向，都是识别非浏览器客户端，而selenium所做的事情，恰恰是驱动真正的浏览器去执行请求和操作，只不过信号不是来源于鼠标，而是来源于selenium的API（selenium本是一个自动化的测试工具）</li><li>自然人用户能做的一切，selenium几乎都驱动浏览器去做，无论是否界面，包括输入、点击、滑动，等等。</li><li>然而到底是鼠标操作的浏览器发起请求还是API，对于服务端来说，是没有任何差别的</li><li>早期的时候流行的组合是selenium+phantomjs而不是selenium+chrome浏览器驱动，因为phantomjs是一款没有界面的浏览器，业界称作无头浏览器（headless），由于没有界面和渲染，其运行要大大优于有界面的浏览器，后来chrome和firefox也推出了无头模式，且其运行速度很流畅，phantomjs就告终了。</li></ul><h2 id="python利用selenium模拟浏览器抓取异步加载的页面信息"><a href="#python利用selenium模拟浏览器抓取异步加载的页面信息" class="headerlink" title="python利用selenium模拟浏览器抓取异步加载的页面信息"></a>python利用selenium模拟浏览器抓取异步加载的页面信息</h2><h3 id="获取数据源"><a href="#获取数据源" class="headerlink" title="获取数据源"></a>获取数据源</h3><blockquote><p>模拟启动火狐/谷歌浏览器<br>from selenium import webdriver<br>调用键盘的按键操作需要引入keys包<br>from selenium.webdriver.common.keys import Keys<br>导入chrome项<br>from selenium.webdiver.chrome.options import Options<br>模拟鼠标动作<br>from selenuim.webdriver import ActionChains</p></blockquote><ol><li>启动浏览器，有头模式<blockquote><p>Drive=webdiver.Chrome()<br>Driver.get(url)<br>print Driver.page_source<br>Driver.close()  关闭浏览器</p></blockquote></li><li>创建chrome浏览器驱动，无头模式<blockquote><p>from selenium.webdriver.chrome.options import Options<br>chrome_options=Options()<br>chrome_options.add_argument(“–headless”)<br>driver=webdriver.Chrome(chrome_options=chrome_options)<br>driver.implicity_wait(10)<br>driver.get(url)</p></blockquote></li></ol><p>其实在使用selenium模块处理异步加载问题主要使用以下代码,自动的将滚动条拉下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">模拟谷歌浏览器滚动条滚动</span><br><span class="line">for i in range(1, 6):</span><br><span class="line">   js=&quot;var q=document.body.scrollTop=100000&quot;</span><br><span class="line">   driver.execute_script(js)</span><br><span class="line">   print(&apos;=====================================&apos;)</span><br><span class="line">   time.sleep(3)</span><br><span class="line">   driver.execute_script(&quot;window.scrollTo(0, document.body.scrollHeight);&quot;)</span><br><span class="line">   time.sleep(2)</span><br></pre></td></tr></table></figure></p><p><strong>除此之外使用selenium模块解决的更多的还有反爬虫中的验证码登录问题</strong></p><h3 id="数据源的解析与获取"><a href="#数据源的解析与获取" class="headerlink" title="数据源的解析与获取"></a>数据源的解析与获取</h3><p>选择器（来源：<a href="https://www.cnblogs.com/yxi-liu/p/selenium.html）" target="_blank" rel="noopener">https://www.cnblogs.com/yxi-liu/p/selenium.html）</a></p><ol><li>find_element_by_id  按照id 查找</li><li>find_element_by_link_text  按照里面的文本查找</li><li>find_element_by_partial_link_text 按照文本的部分模糊查找</li><li>find_element_by_tag_name 按照标签名</li><li>find_element_by_class_name 按照类名</li><li>find_element_by_name  按照name的属性查找</li><li>find_element_by_css_selector  css选择器的方式查找</li><li>find_element_by_xpath    按照路径茶渣</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">html=etrr.HTML(driver.page_source)</span><br><span class="line">all_img_list=[]</span><br><span class="line">img_group_list = html.xpath(&quot;//img[contains(@id,&apos;J_normal&apos;)]&quot;)</span><br><span class="line">print(len(img_group_list))</span><br><span class="line">for img_group in img_group_list:</span><br><span class="line">    img_of_group = img_group.xpath(&quot;.//@data-original | .//@data-img-back | .//@data-img-side&quot;)</span><br><span class="line">    print(img_of_group)</span><br><span class="line">    all_img_list.append(img_of_group[0])</span><br><span class="line">    print(len(all_img_list))</span><br><span class="line">    print(all_img_list)</span><br></pre></td></tr></table></figure><p><strong>具体案例可见后文中的“QQ邮件的自动发送”</strong></p><h1 id="数据存储问题"><a href="#数据存储问题" class="headerlink" title="数据存储问题"></a>数据存储问题</h1><p>正如上文所说的将爬取下来的数据存储主要有三种方式：</p><ol><li>存储到txt文件中</li><li>存储到csv,excel文件中</li><li>存储到mysql,mongodb数据库中</li></ol><h2 id="数据存储到txt文件中"><a href="#数据存储到txt文件中" class="headerlink" title="数据存储到txt文件中"></a>数据存储到txt文件中</h2><p>将数据存储到txt文件中基本上都是逐条存储进去<br>方法1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def save_to_txt(item):</span><br><span class="line">with open(&apos;C:\\Users\\lenovo\\Desktop\\1\\刘睿\\狄仁杰.txt&apos;, &apos;a&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    f.write(item[&apos;date&apos;] + &apos;,&apos; + item[&apos;nickname&apos;] + &apos;,&apos; + item[&apos;city&apos;] + &apos;,&apos; + str(item[&apos;rate&apos;]) + &apos;,&apos; + item[&apos;comment&apos;] + &apos;\n&apos;)</span><br><span class="line">    print(&apos;ok&apos;)</span><br></pre></td></tr></table></figure><p>方法2<br>使用json.dumps方法是将字典转化成str然后写入txt中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def parse_one_page(html):</span><br><span class="line">    pattern = re.compile(&quot;&lt;dd&gt;.*? board_index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;.*?name.*?a.*?&gt;(.*?)&lt;/a&gt;.*?star.*?(.*?)&lt;/p&gt;.*?releasetime.*?&gt;(.*?)&lt;/p&gt;.*?integer.*?&gt;(.*?)&lt;/i&gt;.*?fraction.*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;&quot;,re.S)</span><br><span class="line">    items =re.findall(pattern,html)  #生成一个生成器通过for in从生成器中调取数据</span><br><span class="line">    for item in items:</span><br><span class="line">        yield&#123;                 &apos;&apos;&apos;yield 是一个类似 return 的关键字，只是这个函数返回的是个生成器</span><br><span class="line">        当你调用这个函数的时候，函数内部的代码并不立马执行 ，这个函数只是返回一个生成器对象&apos;&apos;&apos;</span><br><span class="line">当你使用for进行迭代的时候，函数中的代码才会执行</span><br><span class="line">              &quot;index&quot;:item[0],</span><br><span class="line">              &quot;image&quot;:item[1],</span><br><span class="line">              &quot;title&quot;:item[2],</span><br><span class="line">              &quot;actor&quot;:item[3].strip()[3:],</span><br><span class="line">              &quot;time&quot;:item[4].strip()[5:],</span><br><span class="line">              &quot;score&quot;:item[5]+item[6]              </span><br><span class="line">              &#125;</span><br><span class="line">def write_to_file(content):</span><br><span class="line">    with open(&quot;result.text&quot;,&quot;a&quot;,encoding=&quot;utf-8&quot;) as f:#a相当于append表示将文件追加写入文末</span><br><span class="line">        f.write(json.dumps(content,ensure_ascii=False) + &quot;\n&quot;)#dumps是将dict转化成str格式，loads是将str转化成dict格式。</span><br></pre></td></tr></table></figure><p>方法3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def get_btc_dt(pages):</span><br><span class="line">f0 = open(&apos;title.txt&apos;, &apos;w&apos;)</span><br><span class="line">f1 = open(&apos;time.txt&apos;, &apos;w&apos;)</span><br><span class="line">for page in range(1, pages+1):</span><br><span class="line">url = &apos;http://www.8btc.com/bitcoin/page/&#123;&#125;&apos;.format(str(page))</span><br><span class="line">web_data = requests.get(url, headers=headers)</span><br><span class="line">time.sleep(2)</span><br><span class="line">soup = BeautifulSoup(web_data.text, &apos;lxml&apos;)</span><br><span class="line">titles = soup.select(&apos;div.article-content.clearfix &gt; div.article-title.visible-md.visible-lg &gt; a&apos;)</span><br><span class="line">times = soup.select(&apos;div.article-content.clearfix &gt; div.article-info.clearfix &gt; span.pull-left.visible-sm.visible-xs&apos;)</span><br><span class="line">for time, title in zip(times, titles):</span><br><span class="line">    time = time.text</span><br><span class="line">    title = title.text</span><br><span class="line">    print(time)</span><br><span class="line">    f0.write(time)</span><br><span class="line">    f0.write(&apos;\n&apos;)</span><br><span class="line">    f1.write(title)</span><br><span class="line">    f1.write(&apos;\n&apos;)</span><br><span class="line">f0.close()</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure><h2 id="存储到csv-excel文件中"><a href="#存储到csv-excel文件中" class="headerlink" title="存储到csv,excel文件中"></a>存储到csv,excel文件中</h2><p>主要是将由字典结构&amp;其内值为列表的数据通过pandas的DataFrame存入csv和excel中</p><p>方法1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">datalength = len(data)</span><br><span class="line">Date_d = np.zeros(datalength)</span><br><span class="line">Open = np.zeros(datalength)</span><br><span class="line">High = np.zeros(datalength)</span><br><span class="line">Low = np.zeros(datalength)</span><br><span class="line">Close = np.zeros(datalength)</span><br><span class="line">Volume = np.zeros(datalength)</span><br><span class="line">for i in range(len(data)):</span><br><span class="line">    Date_d[i] = data[i][0]</span><br><span class="line">    Open[i] = data[i][1]</span><br><span class="line">    High[i] = data[i][2]</span><br><span class="line">    Low[i] = data[i][3]</span><br><span class="line">    Close[i] = data[i][4]</span><br><span class="line">    Volume[i] = data[i][5]</span><br><span class="line"></span><br><span class="line">Date_d = Date_d / 1000000000</span><br><span class="line">df = pd.DataFrame(&#123;&apos;Close&apos;: Close, &apos;Date_d&apos;: Date_d,&apos;Open&apos;:Open,&apos;High&apos;:High,&apos;Low&apos;:Low,&apos;Volume&apos;:Volume&#125;)</span><br><span class="line">df.to_csv(&apos;C:\\Users\\lenovo\Desktop\\btc_yunbi.csv&apos;)</span><br></pre></td></tr></table></figure><p>方法2：<br>将由列表组成的,其内是字典的数据,可以将数据一条一条插入，也可以一起插入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">result_list = []</span><br><span class="line">for item in item_list:</span><br><span class="line">    result_dict = &#123;&#125;</span><br><span class="line">    result_dict[&apos;title&apos;] = item[&apos;title&apos;].replace(&apos;&lt;span class=H&gt;&apos;, &apos;&apos;).replace(&apos;&lt;/span&gt;&apos;, &apos;&apos;)</span><br><span class="line">    result_dict[&apos;url&apos;] = &apos;http:&apos; + item[&apos;detail_url&apos;]</span><br><span class="line">    result_dict[&apos;location&apos;] = item[&apos;item_loc&apos;]</span><br><span class="line">    result_dict[&apos;shop_name&apos;] = item[&apos;nick&apos;]</span><br><span class="line">    result_dict[&apos;原价&apos;] = item[&apos;reserve_price&apos;]</span><br><span class="line">    result_dict[&apos;现价&apos;] = item[&apos;view_price&apos;]</span><br><span class="line">    print(result_dict)</span><br><span class="line">    result_list.append(result_dict)</span><br><span class="line">return result_list</span><br><span class="line">def write_data(self, result_list):</span><br><span class="line">with open(&apos;result.csv&apos;, &apos;w&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class="line">    writer = csv.DictWriter(f, fieldnames=[&apos;title&apos;, &apos;原价&apos;, &apos;现价&apos;,&apos;shop_name&apos;, &apos;location&apos;,  &apos;url&apos;])</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerows(result_list)</span><br></pre></td></tr></table></figure></p><h2 id="存储到mysql-mongodb数据库中"><a href="#存储到mysql-mongodb数据库中" class="headerlink" title="存储到mysql, mongodb数据库中"></a>存储到mysql, mongodb数据库中</h2><p>先在mysql数据库中建立好表格(表头以及类型)然后将数据逐条插入数据库中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=&quot;127.0.0.1&quot;, user=&quot;root&quot;, passwd=&quot;341124&quot;, db=&quot;jd&quot;, charset=&quot;utf8&quot;)</span><br><span class="line">使用cursor()的方法获取操作游标</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">for i in range(0, len(item[&apos;title&apos;])):</span><br><span class="line">    try:</span><br><span class="line">        cur.execute(&quot;INSERT INTO jingjing(title,href) VALUES (%s, %s)&quot;, [item[&apos;title&apos;][i], &quot;http:&quot;+item[&apos;href&apos;][i]])</span><br><span class="line">        conn.commit()</span><br><span class="line">        print(&apos;ok&apos;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        #错误回滚</span><br><span class="line">        conn.rollback()</span><br><span class="line">    conn.close() </span><br><span class="line">    print(&apos;ok&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：不要左顾右盼。慢慢积累，慢慢写吧。毕竟除了这样单调的努力，我什么也做不了。 &lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://phi87jf30.bkt.clouddn.com/jianchi.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="https://black-house.github.io/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://black-house.github.io/2018/10/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://black-house.github.io/2018/10/30/第一篇博客/</id>
    <published>2018-10-30T02:47:38.000Z</published>
    <updated>2018-11-05T15:13:27.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h1><p><a href="http://www.jianshu.com" target="_blank" rel="noopener">简书</a><br><img src="http://phi87jf30.bkt.clouddn.com/%E9%AD%81%E6%8B%94.jpg" alt=""><br>每日一更<br><a id="more"></a></p><ol><li>生活不仅眼前的苟且还有诗和远方</li><li>我们还要有更好的生活</li></ol><blockquote><p><em>一盏灯</em>， 一片昏黄； 一<strong>简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd.read(&apos;get_stock_basics.csv&apos;,encoding = &apos;utf8&apos;)</span><br><span class="line">print(data.head())</span><br><span class="line">ts_codesymbolnamelist_statuslist_dateis_hs</span><br><span class="line">000001.SZ1平安银行L19910403S</span><br><span class="line">000002.SZ2万科AL19910129S</span><br><span class="line">000004.SZ4国农科技L19910114N</span><br><span class="line">000005.SZ5世纪星源L19901210N</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;链接与图片&quot;&gt;&lt;a href=&quot;#链接与图片&quot; class=&quot;headerlink&quot; title=&quot;链接与图片&quot;&gt;&lt;/a&gt;链接与图片&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://phi87jf30.bkt.clouddn.com/%E9%AD%81%E6%8B%94.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;每日一更&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://black-house.github.io/2018/10/29/hello-world/"/>
    <id>https://black-house.github.io/2018/10/29/hello-world/</id>
    <published>2018-10-29T09:39:31.422Z</published>
    <updated>2018-10-29T09:39:31.423Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
